generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums 정의
enum Market {
  KR
  US
}

enum Currency {
  KRW
  USD
}

enum TradeType {
  BUY
  SELL
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  trades        Trade[]
  settings      UserSettings?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Trade {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  symbol       String
  type         TradeType
  date         DateTime
  price        Float
  quantity     Int
  currency     Currency  @default(KRW)
  market       Market    @default(KR)
  thoughts     String?
  emotionTags  String[] // PostgreSQL array 타입
  aiAnalysis   String?
  confidence   Float?
  marketKospi  Float?
  marketNasdaq Float?
  marketSp500  Float?
  currentPrice Float?
  profitLoss   Float?
  profitRate   Float?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([userId, symbol])
  @@map("trades")
}

model EmotionTag {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String
  description String?
  color       String?
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("emotion_tags")
}

model MarketData {
  id        String   @id @default(cuid())
  date      DateTime @unique
  kospi     Float?
  nasdaq    Float?
  sp500     Float?
  dollar    Float?
  source    String?
  createdAt DateTime @default(now()) @map("created_at")

  @@map("market_data")
}

model KisToken {
  id          String   @id @default(cuid())
  accessToken String   @map("access_token")
  tokenType   String   @default("Bearer") @map("token_type")
  expiresIn   Int      @map("expires_in")
  issuedAt    DateTime @default(now()) @map("issued_at")
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("kis_tokens")
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique @map("user_id")
  timezone           String   @default("Asia/Seoul")
  currency           String   @default("KRW")
  dateFormat         String   @default("YYYY-MM-DD")
  emailNotifications Boolean  @default(true)
  weeklyReport       Boolean  @default(true)
  autoAnalyze        Boolean  @default(true)
  analysisLanguage   String   @default("ko")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}
